#!/bin/sh

# The following is the LSB init header.  See
# http://www.linux-foundation.org/spec/booksets/LSB-Core-generic/LSB-Core-generic.html#INITSCRCOMCONV
#
### BEGIN INIT INFO
# Provides: iwhd
# Default-Start: 3 4 5
# Short-Description: image warehouse daemon
# Description: This is the primary server process for the image warehouse
### END INIT INFO

# the following is chkconfig init header
#
# iwhd: image warehouse daemon
#
# chkconfig: - 40 60
# Description: This is the primary server process for the image warehouse
#
# processname: iwhd
# pidfile: @localstatedir@/run/iwhd.pid

. @sysconfdir@/rc.d/init.d/functions

SERVICE=iwhd
PROCESS=iwhd
PIDFILE=@localstatedir@/run/$SERVICE.pid
CONFIG_JS=@sysconfdir@/iwhd/conf.js
MONGOD_SERVER_SPEC=localhost:27017

# How many seconds to wait for mongod to become usable before giving up.
MONGOD_N_SECONDS=2

IWHD_ARGS="-d $MONGOD_SERVER_SPEC"

test -r @sysconfdir@/sysconfig/iwhd && . @sysconfdir@/sysconfig/iwhd

RETVAL=0

wait_for()
{
    local sleep_seconds=$1
    local max_n_sleeps=$2
    local cmd=$3
    case $max_n_sleeps in
        [0-9]*);; *) echo invalid max_n_sleeps $max_n_sleeps 1>&2; exit 1;;
    esac
    case $sleep_seconds in
        [0-9]*|.[0-9]*);; *)
          echo invalid sleep interval $sleep_seconds 1>&2; exit 1;;
    esac
    local i=0
    while :; do
        eval "$cmd" && return 0
        sleep $sleep_seconds
        i=$(expr $i + 1)
        test $i = $max_n_sleeps && return 1
    done
}

wait_for_mongod() {
    # Wait for up to $1 seconds for mongod to begin listening.
    wait_for .1 $(($1 * 10)) 'mongo $MONGOD_SERVER_SPEC \
      < /dev/null >/dev/null 2>&1'
}

start() {
    # This is a bit kludgey.  We'll use the standard daemon
    # framework once iwhd knows how to daemonize itself.
    test -f $PIDFILE && kill -0 $(cat $PIDFILE) 2>/dev/null \
        && { printf %s $"$PROCESS appears to already be running"
             echo_failure; echo; return 1; }
    mkdir -p @localstatedir@/cache/iwhd
    rm -rf @localstatedir@/cache/iwhd/*
    printf %s $"waiting for mongod to listen on $MONGOD_SERVER_SPEC"
    wait_for_mongod $MONGOD_N_SECONDS && echo_success || echo_failure
    echo

    printf %s $"Starting $SERVICE daemon: "
    $PROCESS -c "$CONFIG_JS" $IWHD_ARGS > /var/log/iwhd.log 2>&1 &
    pid=$!
    RETVAL=$?
    if test $RETVAL = 0; then
        echo $pid > $PIDFILE
        touch /var/lock/subsys/$SERVICE
        success
    else
        failure
    fi
    echo
}

stop() {
    action $"Stopping $SERVICE daemon: " killproc -p $PIDFILE $PROCESS
    RETVAL=$?
    if test $RETVAL = 0; then
        rm -f @localstatedir@/lock/subsys/$SERVICE
        rm -f $PIDFILE
        rm -rf @localstatedir@/cache/iwhd/*
    fi
}

restart() {
    stop
    start
}

reload() {
    printf %s $"Reloading $SERVICE configuration: "

    killproc -p $PIDFILE $PROCESS -HUP
    RETVAL=$?
    echo
    return $RETVAL
}

# See how we were called.
case "$1" in
    start|stop|restart|reload)
        $1
        ;;
    status)
        status -p $PIDFILE $PROCESS
        RETVAL=$?
        ;;
    force-reload)
        reload
        ;;
    condrestart|try-restart)
        test -f @localstatedir@/lock/subsys/$SERVICE && restart || :
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|reload|force-reload|try-restart}"
        exit 2
        ;;
esac
exit $RETVAL
