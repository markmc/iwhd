#!/bin/bash

# Copyright (C) 2010-2011 Red Hat, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

ME=$(expr "./$0" : '.*/\(.*\)$')
warn () { printf '%s\n' "$@" >&2; }
die () { warn "$ME: $@"; exit 1; }

# spidesc: Spit the XML at $1/$2.xml.
#
# This is the same XML spec that virsh uses for "dumpxml" and "define",
# but it cannot be fed straight to virsh on purpose. A tool has to load it,
# then fill out things like network, RAM, clock type, and OS features.
spitdesc () {
  tgtdir=$1; shift
  object=$1; shift
  export object

  cat <<EOF > $tgtdir/$object.xml
<domain type='kvm'>
  <name>${object}</name>
  <uuid>00000000-0000-0000-0000-000000000000</uuid>
  <os>
    <type arch='x86_64' machine='pc'>hvm</type>
    <boot dev='hd'/>
  </os>
  <devices>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw'/>
      <source file='${object}'/>
      <target dev='vda' bus='virtio'/>
    </disk>
  </devices>
</domain>
EOF
  # Should we print something here if $?!=0, or expect cat to complain?
  return $?
}

# main()

# $bucket is iwhd bucket.
bucket=$1; shift
# $object is iwhd's image name, which also serves as ID.
# So, if $object=foo.img, then we end uploading foo.img.xml.
# The foo.img itself is an uncompressed root filesystem, a device image.
# Finally, $object is in local directory $bucket/ (as fs back-end works).
object=$1; shift
# $nfsdir is the target directory, not including staging/.
# It has to be absolute, because we rely on $bucket/$object being enough to
# open the source and that's only possible if $pwd is the top of fs back-end.
nfsdir=$1; shift

test -z "$bucket" && die "No bucket"
test -z "$object" && die "No object"
test -z "$nfsdir" && die "No nfsdir"
test -d "$nfsdir" || die "Not a directory: $nfsdir"

#
# We require staging/ to be pre-made, because it's a useful signifier
# of correct target, in case of a configuration error in iwhd.
#
test -d "$nfsdir/staging" \
  || die "Required directory is missing: $nfsdir/staging"

#
# The API defines staging/ for a good reason: if anything goes wrong,
# a clean-up process can collect pieces even if we crash. So, create temp
# in staging/, but be polite and set a trap anyway.
#
tmpdir=
trap "rm -rf $tmpdir" 0
tmpdir=$(mktemp -d -p $nfsdir/staging) || exit 1
for sig_ in 1 2 3 13 15; do
  eval "trap 'exit $(expr $sig_ + 128)' $sig_"
done

cp "$bucket/$object" "$tmpdir/$object" || exit 1
spitdesc $tmpdir $object || exit 1

# great, we didn't run out of disk space, now rename and declare victory.
mv $tmpdir/$object $tmpdir/$object.xml "$nfsdir"

# Spit the ID like EC2. Thus far it's always the same as $object, but
# officially it does not have to be.
echo "IMAGE $object"
exit 0
