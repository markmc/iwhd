%{
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <error.h>
#include "query.h"

char *arg_buf;
int arg_off;
int arg_len;
value_t **cur_expr;

static void
xalloc_die (void)
{
  error (EXIT_FAILURE, 0, "%s", "memory exhausted");

  /* The `noreturn' cannot be given to error, since it may return if
     its first argument is 0.  To help compilers understand the
     xalloc_die does not return, call abort.  Also, the abort is a
     safety feature if exit_failure is 0 (which shouldn't happen).  */
  abort ();
}

/* Allocate N bytes of memory dynamically, with error checking.  */
static void *
xmalloc (size_t n)
{
  void *p = malloc (n);
  if (!p && n != 0)
    xalloc_die ();
  return p;
}

/* Change the size of an allocated block of memory P to N bytes,
   with error checking.  */
static void *
xrealloc (void *p, size_t n)
{
  p = realloc (p, n);
  if (!p && n != 0)
    xalloc_die ();
  return p;
}

/* Clone an object P of size S, with error checking.  There's no need
   for xnmemdup (P, N, S), since xmemdup (P, N * S) works without any
   need for an arithmetic overflow check.  */
static void *
xmemdup (void const *p, size_t s)
{
  return memcpy (xmalloc (s), p, s);
}

/* Clone STRING.  */
static char *
xstrdup (char const *string)
{
  return xmemdup (string, strlen (string) + 1);
}

/* TBD: use separate function to parse dates differently */
value_t *
make_number (char *text)
{
	value_t *tmp = malloc(sizeof(*tmp));

	if (tmp) {
		tmp->type = T_NUMBER;
		tmp->as_num = strtoll(text,NULL,10);
	}

	return tmp;
}

value_t *
make_string (char *text, type_t t)
{
	value_t *tmp = malloc(sizeof(*tmp));

	if (tmp) {
		tmp->type = t;
		tmp->as_str = xstrdup(text);
	}

	return tmp;
}

value_t *
make_tree (type_t t, value_t *left, value_t *right)
{
	value_t *tmp = malloc(sizeof(*tmp));

	if (tmp) {
		tmp->type = t;
		tmp->as_tree.left = left;
		tmp->as_tree.right = right;
	}

	return tmp;
}

value_t *
make_comp (comp_t c, value_t *left, value_t *right)
{
	value_t *tmp = make_tree(T_COMP,left,right);

	if (tmp) {
		tmp->as_tree.op = c;
	}

	return tmp;
}

value_t *
make_link (value_t *left, value_t *right)
{
	char	*copy;
	
	copy = strdup((char *)right);
	if (!copy) {
		return NULL;
	}

	return make_tree(T_LINK,left,(value_t *)copy);
}

#if defined(UNIT_TEST)
struct { char *name; char *value; } hacked_obj_fields[] = {
	{ "a", "2" }, { "b", "7" }, { "c", "11" },
	{ "template", "templates/the_tmpl" },
	{ NULL }
};

char *
unit_oget_func (void * notused, char *text)
{
	int i;

	for (i = 0; hacked_obj_fields[i].name; ++i) {
		if (!strcmp(hacked_obj_fields[i].name,text)) {
			return hacked_obj_fields[i].value;
		}
	}

	return NULL;
}
getter_t unit_oget = { unit_oget_func };

char *
unit_sget_func (void * notused, char *text)
{
	return "never";
}
getter_t unit_sget = { unit_sget_func };

struct { char *obj; char *key; char *value; } hacked_links[] = {
	{ "templates/the_tmpl", "owner", "users/the_user" },
	{ "users/the_user", "name", "Jeff Darcy" },
	{ NULL }
};

char *
follow_link (char *object, char *key)
{
	int i;

	for (i = 0; hacked_obj_fields[i].name; ++i) {
		if (strcmp(object,hacked_links[i].obj)) {
			continue;
		}
		if (strcmp(key,hacked_links[i].key)) {
			continue;
		}
		return hacked_links[i].value;
	}

	return NULL;
}
#else
extern char *follow_link (char *object, char *key);
#endif

char *
string_value (value_t *v, getter_t *oget, getter_t *sget)
{
	int	left;

	switch (v->type) {
	case T_STRING:
		return v->as_str;
	case T_OFIELD:
		return oget ? CALL_GETTER(oget,v->as_str) : "";
	case T_SFIELD:
		return sget ? CALL_GETTER(sget,v->as_str) : "";
	case T_LINK:
		left = string_value(v->as_tree.left,oget,sget);
		switch (left) {
		case 0:
		case 1:
		case -1:
			return NULL;
		default:
			return follow_link((char *)left,
				(char *)v->as_tree.right);
		}
	default:
		return NULL;
	}
}

int
is_ok_number (char *a_str)
{
	char	*p;

	if (!a_str) {
		return 0;
	}

	for (p = a_str; *p; ++p) {
		if (!isdigit(*p)) {
			return 0;
		}
	}

	return 1;
}

int
compare (value_t *left, comp_t op, value_t *right,
	 getter_t *oget, getter_t *sget)
{
	char	*lstr;
	char	*rstr;
	int	 lval = 0; // solely to placate gcc
	int	 rval;
	int	 num_ok = 1;

	lstr = string_value(left,oget,sget);
	rstr = string_value(right,oget,sget);

	if (left->type == T_NUMBER) {
		lval = left->as_num;
	}
	else if (lstr) {
		if (is_ok_number(lstr)) {
			lval = strtoll(lstr,NULL,0);
		}
		else {
			num_ok = 0;
		}
	}
	else {
		lval = eval(left,oget,sget);
		if (lval < 0) {
			return lval;
		}
	}

	if (right->type == T_NUMBER) {
		rval = right->as_num;
	}
	else if (rstr) {
		if (is_ok_number(rstr)) {
			rval = strtoll(rstr,NULL,0);
		}
		else {
			num_ok = 0;
		}
	}
	else {
		rval = eval(right,oget,sget);
		if (rval < 0) {
			return rval;
		}
	}

	if (!num_ok) {
		if (!lstr || !rstr) {
			return -1;
		}
		lval = strcmp(lstr,rstr);
		rval = 0;
	}

	switch (op) {
	case C_LESSTHAN:	return (lval < rval);
	case C_LESSOREQ:	return (lval <= rval);
	case C_EQUAL:		return (lval == rval);
	case C_DIFFERENT:	return (lval != rval);
	case C_GREATEROREQ:	return (lval >= rval);
	case C_GREATERTHAN:	return (lval > rval);
	default:
		return -1;
	}
}

void
_print_value (value_t *v, int level)
{
	if (!v) {
		printf("%*sNULL\n",level,"");
		return;
	}

	switch (v->type) {
	case T_NUMBER:
		printf("%*sNUMBER %lld\n",level,"",v->as_num);
		break;
	case T_STRING:
		printf("%*sSTRING %s\n",level,"",v->as_str);
		break;
	case T_OFIELD:
#if defined(UNIT_TEST)
		printf("%*sOBJECT FIELD %s (%s)\n",level,"",v->as_str,
			unit_oget_func(NULL,v->as_str));
#else
		printf("%*sOBJECT FIELD %s\n",level,"",v->as_str);
#endif
		break;
	case T_SFIELD:
#if defined(UNIT_TEST)
		printf("%*sSERVER FIELD %s (%s)\n",level,"",v->as_str,
			unit_sget_func(NULL,v->as_str));
#else
		printf("%*sSERVER FIELD %s\n",level,"",v->as_str);
#endif
		break;
	case T_COMP:
		printf("%*sCOMPARISON\n",level,"");
		_print_value(v->as_tree.left,level+2);
		_print_value(v->as_tree.right,level+2);
		break;
	case T_NOT:
		printf("%*sNOT\n",level,"");
		_print_value(v->as_tree.left,level+2);
		break;
	case T_AND:
		printf("%*sAND\n",level,"");
		_print_value(v->as_tree.left,level+2);
		_print_value(v->as_tree.right,level+2);
		break;
	case T_OR:
		printf("%*sOR\n",level,"");
		_print_value(v->as_tree.left,level+2);
		_print_value(v->as_tree.right,level+2);
		break;
	case T_LINK:
		printf("%*sLINK\n",level,"");
		_print_value(v->as_tree.left,level+2);
		printf("%*s.%s\n",level+2,"",(char *)v->as_tree.right);
		break;
	default:
		printf("%*sUNKNOWN %d\n",level,"",v->type);
	}
}

void
print_value (value_t *v)
{
	_print_value(v,0);
}

void
free_value (value_t *v)
{
	if (!v) {
		return;
	}

	switch (v->type) {
	case T_STRING:
	case T_OFIELD:
	case T_SFIELD:
		free(v->as_str);
		free(v);
		break;
	case T_LINK:
		free_value(v->as_tree.left);
		free(v->as_tree.right);
		free(v);
		break;
	case T_COMP:
	case T_AND:
	case T_OR:
		free_value(v->as_tree.right);
		/* Fall through. */
	case T_NOT:
		free_value(v->as_tree.left);
		/* Fall through. */
	default:
		free(v);
	}
}

int
eval (value_t *v, getter_t *oget, getter_t *sget)
{
	int	 res;
	char	*str;

	switch (v->type) {
	case T_NUMBER:
		return v->as_num != 0;
	case T_STRING:
		return (int)v->as_str;
	case T_OFIELD:
		return (int)CALL_GETTER(oget,v->as_str);
	case T_SFIELD:
		return (int)CALL_GETTER(sget,v->as_str);
	case T_LINK:
		str = string_value(v->as_tree.left,oget,sget);
		return (int)follow_link(str,(char *)v->as_tree.right);
	case T_COMP:
		return compare(v->as_tree.left,(comp_t)v->as_tree.op,
			v->as_tree.right, oget, sget);
	case T_NOT:
		res = eval(v->as_tree.left,oget,sget);
		return (res >= 0) ? !res : res;
	case T_AND:
		res = eval(v->as_tree.left,oget,sget);
		if (res > 0) {
			res = eval(v->as_tree.right,oget,sget);
		}
		return res;
	case T_OR:
		res = eval(v->as_tree.left,oget,sget);
		if (res > 0) {
			return res;
		}
		return eval(v->as_tree.right,oget,sget);
	default:
		return -1;
	}
}

#define YY_INPUT(buf,result,max) {					  \
	result = (arg_off < arg_len) ? (*buf = arg_buf[arg_off++], 1)	  \
		: (arg_off == arg_len) ? (*buf = '\n', ++arg_off, 1) : 0; \
}

#define YYSTYPE value_t *
%}

Stmt = - BoolExpr - EOL { *cur_expr = $$; }
     | ( !EOL . )* EOL

BoolExpr = l:CompExpr (
	( - AND - r:CompExpr )
		{ $$ = l = make_tree(T_AND,l,r); }
	( - OR - r:CompExpr )
		{ $$ = l = make_tree(T_OR,l,r); }
)* -

CompExpr = l:Unary
         ( ( LESS - r:Unary { $$ = make_comp(C_LESSTHAN,l,r); } )
         | ( LESS EQUAL - r:Unary { $$ = make_comp(C_LESSOREQ,l,r); } )
         | ( EQUAL EQUAL - r:Unary { $$ = make_comp(C_EQUAL,l,r); } )
         | ( NOT EQUAL - r:Unary { $$ = make_comp(C_DIFFERENT,l,r); } )
         | ( GREATER EQUAL - r:Unary { $$ = make_comp(C_GREATEROREQ,l,r); } )
         | ( GREATER - r:Unary { $$ = make_comp(C_GREATERTHAN,l,r); } ) )? -

Unary = Atom -
      | NOT - e:Unary - { $$ = make_tree(T_NOT,e,NULL); }

Atom = ( Literal | LinkField | ParenExpr ) -

Literal = NUMBER | STRING | TIME

LinkField = f:Field ( DOT i:ID { $$ = f = make_link(f,i); } )* -

Field = DOLLAR i:ID - { $$ = make_string((char *)i,T_OFIELD); }
      | WAFFLE i:ID - { $$ = make_string((char *)i,T_SFIELD); }

ParenExpr = OPEN v:BoolExpr CLOSE - { $$ = v; }

NUMBER	= < [0-9]+ >		{ $$ = make_number(yytext); }
STRING	= '"' < [^"]* > '"'	{ $$ = make_string(yytext,T_STRING); }
TIME	= '~' < [^~]* > '~'	{ $$ = make_number(yytext); }
ID	= < [a-z_]+ >		{ $$ = (YYSTYPE)yytext; }
DOLLAR	= '$'
WAFFLE	= '#'
OPEN	= '('
CLOSE	= ')'
LESS	= '<'
GREATER	= '>'
EQUAL	= '='
NOT	= '!'
AND	= '&&'
OR	= '||'
DOT	= '.'

-	= [ \t]*
EOL	= '\n' | '\r\n' | '\r' | ';'

%%

value_t *
parse (const char *text)
{
	value_t *expr = NULL;

	arg_buf = text;
	arg_len = strlen(text);
	arg_off = 0;
	cur_expr = &expr;

	while (yyparse()) {
	}

	return expr;
}

#if defined(UNIT_TEST)
int
main (int argc, char **argv)
{
	int	 i;
	value_t *expr;
	int	 res;

	for (i = 1; i < argc; ++i) {
		expr = parse(argv[i]);
		if (expr) {
			print_value(expr);
			res = eval(expr,&unit_oget,&unit_sget);
			switch (res) {
			case 0:
			case 1:
			case -1:
				printf("= %d\n",res);
				break;
			default:
				printf("= %s\n",(char *)res);
			}
		}
		else {
			printf("could not parse '%s'\n",argv[i]);
		}
	}

	return 0;
}
#endif
