#!/bin/sh
# Ensure that bucket,object,attribute-creation all succeed with code 201.

. "${srcdir=.}/init.sh"; path_prepend_ ..

mkdir FS mongod iwhd || framework_failure_ mkdir failed

m_port=$(get_port $mongo_base_port $lock_dir/m-) \
  || fail_ "failed to get mongodb port"

mongod --help > /dev/null || fail_ "the mongod program is not installed"

mongod --port $m_port --pidfilepath mongod/pid --dbpath mongod > mongod.log 2>&1 &
mongo_pid=$!
cleanup_() { kill -9 $mongo_pid; }

# Wait for up to 5 seconds for mongod to begin listening.
wait_for .1 50 'mongo localhost:$m_port < /dev/null' \
  || framework_failure_ mongod failed to start

port=$(get_port 9095 $lock_dir/i-) || fail_ "failed to get iwhd port"

printf '[{"path": "FS", "type": "fs", "name": "primary"}]\n' \
  > iwhd.cfg || fail=1

iwhd -v -p $port -c iwhd.cfg -d localhost:$m_port &
iwhd_pid=$!
cleanup_() { kill -9 $mongo_pid; kill $iwhd_pid; }

# Wait for up to 5 seconds for iwhd to begin listening on $port.
wait_for .1 50 "curl -s http://localhost:$port" \
  || { echo iwhd failed to listen; Exit 1; }


curl_w() { curl --write-out '%{http_code}' "$@"; }

# Show that bucket,object,attribute-creation all evoke 201.
creation_evokes_201()
{

  # Create a bucket.
  local b=http://localhost:$port/b9
  curl_w -XPUT $b > http-code || fail=1
  test "$(cat http-code)" = 201 || fail=1

  # Create an object in that bucket.
  local obj=$b/obj
  curl_w -XPUT $obj > http-code || fail=1
  test "$(cat http-code)" = 201 || fail=1

  # Create an attribute.
  local attr=$obj/color
  printf blue | curl_w -T - $attr > http-code || fail=1
  test "$(cat http-code)" = 201 || fail=1
}

creation_evokes_201

Exit $fail
