#!/bin/sh
# Test replication functionality.

# TEST-FILE USAGE
#	dflt_test	default policy (negative)
#	pos_test	always-replicate policy (positive)
#	sel_pos		selective positive, delete
#	sel_neg		selective negative
#	attr_chg	attribute change (positive)

. "${srcdir=.}/init.sh"; path_prepend_ ..

mkdir mongod fs_upstream fs_downstream || framework_failure_ mkdir failed

m_port=$(expr $mongo_base_port + 1)

mongod --port $m_port --pidfilepath mongod/pid --dbpath mongod > mongod.log 2>&1 &
mongo_pid=$!
cleanup_() { kill -9 $mongo_pid; }

# Wait for up to 12 seconds for mongod to begin listening.
wait_for .1 120 'mongo localhost:$m_port < /dev/null' \
  || framework_failure_ mongod failed to start

cat > iwhd_u.cfg << EOF
[
	{ "name":"upstream",   "type":"fs",   "path":"fs_upstream" },
	{ "name":"downstream", "type":"http", "host":"localhost", "port": 9093,
	  "color": "blue" }
]
EOF

port=9092
iwhd -v -p $port -c iwhd_u.cfg -d localhost:$m_port &
iwhd_pid=$!
wait_for .1 50 "curl http://localhost:$port" \
	|| framework_failure_ "iwhd upstream"
cleanup_() { kill -9 $mongo_pid; kill $iwhd_pid; }

cat > iwhd_d.cfg << EOF
[
	{"name": "downstream", "type": "fs", "path": "fs_downstream" }
]
EOF

d_port=9093
iwhd -v -p $d_port -c iwhd_d.cfg -d localhost:$m_port -m localhost:$port &
iwhd_d_pid=$!
wait_for .1 50 "curl http://localhost:$d_port" \
	|| framework_failure_ "iwhd downstream"
cleanup_() { kill -9 $mongo_pid; kill $iwhd_pid $iwhd_d_pid; }

api=http://localhost:$port
wait_for_repl() {
	local n_req=$(curl -d op=rep_status $api) || return 1
	case $n_req in
	  '0 requests') return 0 ;;
	  *) return 1 ;;
	esac
}
bkt=$api/rbucket

# Create a bucket to work in.
curl -X PUT $bkt || fail=1
# Make sure it exists at both ends (i.e. create was replicated).
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -d fs_upstream/rbucket || fail=1
test -d fs_downstream/rbucket || fail=1

# Add a file, make sure it's *not* replicated (default policy).
echo foo | curl -T - $bkt/dflt_test || fail=1
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -f fs_upstream/rbucket/dflt_test || fail=1
test -f fs_downstream/rbucket/dflt_test && fail=1

# Set the replication policy to always replicate.
echo -n 1 | curl -T - $bkt/_default/_policy || fail=1

# Add a file, make sure it *is* replicated.
echo foo | curl -T - $bkt/pos_test || fail=1
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -f fs_upstream/rbucket/pos_test || fail=1
test -f fs_downstream/rbucket/pos_test || fail=1

# Make sure we can do selective replication based on object/site attributes.
echo -n '$color==#color' | curl -T - $bkt/_default/_policy || fail=1

# Positive test.
# NB this file is also used by the delete test below
echo -n blue | curl -T - $bkt/sel_pos/color || fail=1
echo -n foo | curl -T - $bkt/sel_pos || fail=1
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -f fs_downstream/rbucket/sel_pos || fail=1

# Negative test.
echo -n red | curl -T - $bkt/sel_neg/color || fail=1
echo -n foo | curl -T - $bkt/sel_neg || fail=1
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -f fs_downstream/rbucket/sel_neg && fail=1

# Test replication of deletes.
curl -X DELETE $bkt/sel_pos || fail=1
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -f fs_upstream/rbucket/sel_pos && fail=1
test -f fs_downstream/rbucket/sel_pos && fail=1

# Test re-replication when we change an attribute.
echo hello | curl -T - $bkt/attr_chg
echo -n 'red' | curl -T - $bkt/attr_chg/color
echo -n '$color=="blue"' | curl -T - $bkt/attr_chg/_policy
test -f fs_downstream/rbucket/attr_chg && fail=1
echo -n 'blue' | curl -T - $bkt/attr_chg/color
wait_for .1 50 "wait_for_repl $api" || fail_ "replication seems stuck"
test -f fs_downstream/rbucket/attr_chg || fail=1

# TBD: add op=check result checks

Exit $fail
