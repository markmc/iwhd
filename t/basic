#!/bin/sh
# Test basic functionality.

# TEST-FILE USAGE
#	obj_test	object put/get/delete
#	list_test	bucket listing
#	attr_put	attribute PUT, headless operation
#	attr_post	attribute POST
#	rsvd_attr	reserved attr
#	role_test	X-redhat-role
#	trunc_test	truncation

. "${srcdir=.}/init.sh"; path_prepend_ ..

mkdir FS mongod iwhd || framework_failure_ mkdir failed

m_port=$(get_port $mongo_base_port $lock_dir/m-) \
  || fail_ "failed to get mongodb port"

mongod --help || fail_ "mongod is not installed"

mongod --port $m_port --pidfilepath mongod/pid --dbpath mongod > mongod.log 2>&1 &
mongo_pid=$!
cleanup_() { kill -9 $mongo_pid; }

# Wait for up to 5 seconds for mongod to begin listening.
wait_for .1 50 'mongo localhost:$m_port < /dev/null' \
  || framework_failure_ mongod failed to start

port=$(get_port 9095 $lock_dir/i-) || fail_ "failed to get iwhd port"
bucket=http://localhost:$port/b1

cat <<EOF > root.xml || framework_failure_
<api service="image_warehouse" version="$VERSION">
	<link rel="bucket_factory" href="http://localhost:$port/_new"/>
	<link rel="provider_list" href="http://localhost:$port/_providers"/>
	<link rel="bucket" href="$bucket"/>
</api>
EOF

cat <<EOF > root.json || framework_failure_
{
	"service": "image_warehouse",
	"version": "$VERSION",
	"providers":
	[
		{
			"rel": "bucket_factory",
			"link": "http://localhost:$port/_new"
		},
		{
			"rel": "provider_list",
			"link": "http://localhost:$port/_providers"
		},
		{
			"rel": "bucket",
			"link": "$bucket"
		}
	]
}
EOF

printf '[{"path": "FS", "type": "fs", "name": "primary"}]\n' \
  > iwhd.cfg || fail=1

iwhd -v -p $port -c iwhd.cfg -d localhost:$m_port &
iwhd_pid=$!
cleanup_() { kill -9 $mongo_pid; kill $iwhd_pid; }

# Wait for up to 5 seconds for iwhd to begin listening on $port.
wait_for .1 50 "curl -s http://localhost:$port" \
  || { echo iwhd failed to listen; Exit 1; }

# Create an empty bucket.
curl -X PUT $bucket || fail=1
test -d FS/b1 || fail=1

# Try to create a duplicate bucket.
curl -f -X PUT $bucket 2> dup_bucket.err
grep ' 500$' dup_bucket.err || fail=1

# PUT to root; should fail
curl -f -X PUT http://localhost:$port 2> root_put.err
grep ' 404$' root_put.err || fail=1

# Create a file in that bucket.
echo foo | curl -T - $bucket/obj_test || fail=1
# Test presence in the FS.
test -f FS/b1/obj_test || fail=1
test "$(cat FS/b1/obj_test)" = foo || fail=1
# Test through the API as well.
curl $bucket/obj_test > f1copy
test "$(cat f1copy)" = foo || fail=1

# Test that non-existing bucket gives 404 and not 500 or even 200 as before.
curl -f http://localhost:$port/no_bucket 2> no_bucket.err
grep ' 404$' no_bucket.err || fail=1

# Get root; default, then Accept: XML & JSON:
curl http://localhost:$port > root || fail=1
compare root root.xml || fail=1

curl -H 'Accept: */xml' http://localhost:$port > root || fail=1
compare root root.xml || fail=1

curl -H 'Accept: */json' http://localhost:$port > root || fail=1
compare root root.json || fail=1

# Delete an object.
curl -X DELETE $bucket/obj_test || fail=1
# Ensure that it's gone from the file system.
test -f FS/b1/obj_test && fail=1
# Ensure that it's gone in the API as well.
curl -f $bucket/obj_test > /dev/null 2> del_object.err
grep ' 404$' del_object.err || fail=1

# Try to delete a nonexistent object.
curl -f -X DELETE $bucket/no-such-obj 2> del_nosuch.err
grep ' 404$' del_nosuch.err || fail=1

# Make sure the X-redhat-role header causes failure on a master iwhd.
echo hello | curl -f -T - -H "X-redhat-role: master" $bucket/role_test \
	2> role.err
grep ' 403$' role.err || fail=1

# ################## Providers

p_name=primary

# Verify that default provider's information is as expected.
curl http://localhost:$port/_providers > p || fail=1
emit_trivial_provider_list xml "$p_name" fs '' 0 '' '' is-last > p.exp || fail=1
compare p.exp p || fail=1

for i in xml json; do

  curl_H() { curl -H "Accept: */$i" "$@"; }

  # List an empty bucket.
  curl_H $bucket > b || fail=1
  emit_bucket_list $i > b.exp || fail=1
  compare b.exp b || fail=1

  # Add an object, list non-empty bucket.
  echo bar | curl -T - $bucket/list_test || fail=1

  # Ensure that new name appears in the listing.
  curl_H $bucket > b || fail=1
  emit_bucket_list $i b1:list_test > b.exp || fail=1
  compare b.exp b || fail=1

  # Remove b1/list_test, to restore state for next iteration of this loop.
  curl -X DELETE $bucket/list_test || fail=1

done

# Crash reported by Steve Loranz
curl -f -X PUT http://localhost:$port/b99
echo hello | curl -T - http://localhost:$port/b99/my_file
printf mock | curl -T - http://localhost:$port/b99/my_file/target
curl -H 'Accept: */json' -d '$target=="mock"' \
    http://localhost:$port/b99/_query > q.xml
tr -s '\t \n' ' ' < q.xml > k && mv k q.xml
printf '[ { "bucket": "b99", "key": "my_file" } ] ' > exp.xml
compare q.xml exp.xml || fail=1

# Before 2011-02-07, this would cause iwhd to hang.
printf hang | curl -T - http://localhost:$port/no-such/fff

# Add a single attribute to an object using the PUT method.
bucket=$bucket
printf nothing | curl -T - $bucket/attr_put || fail=1
printf blue | curl -T - $bucket/attr_put/color || fail=1
test "$(curl $bucket/attr_put/color)" = blue || fail=1

# Add multiple attributes to an object using the POST method.
# NB use a file which doesn't yet exist (yes, this should work too)
curl -d _key=attr_post -d shape=round -d size=big $bucket || fail=1
test "$(curl $bucket/attr_post/shape)" = round || fail=1
test "$(curl $bucket/attr_post/size)" = big || fail=1

cat <<EOF > exp-attr
<object>
	<object_body path="$bucket/attr_post"/>
	<object_attr_list path="$bucket/attr_post/_attrs"/>
	<object_attr name="shape" path="$bucket/attr_post/shape"/>
	<object_attr name="size" path="$bucket/attr_post/size"/>
</object>
EOF
# Print all attributes of an object:
curl $bucket/attr_post/_attrs > out-attr || fail=1
compare out-attr exp-attr || fail=1
# Do the same thing using the old, deprecated mechanism:
curl -d op=parts $bucket/attr_post > out-attr-deprecated || fail=1
compare out-attr-deprecated exp-attr || fail=1

# Ensure that an attempt to add reserved object name fails.
# FIXME: keep this list in sync with the one in rest.c:
# grep '^static.*reserved_name' rest.c
for obj_name in _default _new _policy _query; do
  echo reserved-obj-name | curl -f -T - $bucket/$obj_name 2> bad_oname.err
  # _query evokes 404.  all others evoke 403
  case $obj_name in
    _query) exp=404;;
    *) exp=403;;
  esac
  grep " $exp\$" bad_oname.err || fail=1
done

# Keep this list of reserved words in sync with the one in rest.c:
attr_words='_attrs _bucket _date _etag _key _loc _size'

actual=$(grep '^static.*reserved_attr' "$abs_top_srcdir/rest.c" \
         |perl -pe 's/.*?"//;s/", NULL.*//;s/", "/ /g')
case $attr_words in
  "$actual") ;;
  *) fail_ reserved attribute mismatch;;
esac

# Ensure that an attempt to add each reserved attribute fails.
for attr in $attr_words; do
  case $attr in
    # _attrs is defined only for GET, so evokes 404 rather than 400
    _attrs) exp=404;;
    *) exp=400;;
  esac

  printf whatever | curl -f -T - $bucket/rsvd_attr/$attr 2> bad_attr.err
  grep " $exp$" bad_attr.err || { echo got this:; cat bad_attr.err;
                                  fail_ "expected $exp"; }
done

# Ensure that an attempt to create a bucket with a reserved name fails.
# FIXME: keep this list in sync with the one in rest.c:
# grep '^static.*reserved_bucket_name' rest.c
for b in _new _providers; do
  invalid_bucket=http://localhost:$port/$b
  curl -f -X PUT $invalid_bucket 2> invalid_bucket.err
  # FIXME: change the code so that these are the same
  case $b in
    _new) exp=400;; # MHD_HTTP_BAD_REQUEST
    *) exp=404;;
  esac
  cat invalid_bucket.err
  grep " $exp\$" invalid_bucket.err || fail=1
done

# Make sure PUTting a file truncates.
echo hello | curl -f -T - $bucket/trunc_test || fail=1
echo bye | curl -f -T - $bucket/trunc_test || fail=1
cat FS/b1/trunc_test
test "$(cat FS/b1/trunc_test)" = bye || fail=1

# TBD: add attribute-delete tests when that functionality is implemented

# TBD: add white-box tests for attributes in mongo

# Add a provider:
p1_url=http://localhost:$port/_providers/PROVIDER-1
curl -d type=s3 -dhost=localhost -dport=80 -dkey=u -dsecret=p \
  $p1_url || fail=1

# Ensure it was added
curl http://localhost:$port/_providers > p || fail=1
grep PROVIDER-1 p || fail=1

# Add another provider:
p2_url=http://localhost:$port/_providers/PROVIDER-2
curl -dtype=http -dhost=localhost -dport=9091 $p2_url || fail=1
# Ensure it was added.
curl http://localhost:$port/_providers > p || fail=1
grep PROVIDER-2 p || fail=1

# Add provider using a "name" parameter (not permitted):
p3_url=http://localhost:$port/_providers/PROVIDER-3
curl -dtype=http -dname=X -dhost=localhost -dport=9091 $p3_url || fail=1
# Ensure it was not added.
curl http://localhost:$port/_providers > p || fail=1
grep PROVIDER-3 p && { warn_ add-provider-w/name-param not rejected; fail=1; }

# Delete a provider.
curl -f -X DELETE $p2_url 2> p || fail=1
# Ensure it was deleted.
curl http://localhost:$port/_providers > p || fail=1
grep PROVIDER-2 p && { warn_ $ME_: provider deletion failed; fail=1; }

# Delete a non-existent provider.
curl -f -X DELETE http://localhost:$port/_providers/no-such 2> p
# ensure it fails; expect exit-22 and http: 404
test $? = 22 || fail=1
grep ' 404$' p || fail=1

# Get the name of the current primary provider.
curl http://localhost:$port/_providers/_primary > p || fail=1
test "$(cat p)" = primary || fail=1

# Trying to GET with anything other than "_primary" returns the empty string.
curl http://localhost:$port/_providers/anything > p 2>/dev/null || fail=1
test -s p && fail=1

# Try to add a provider with the reserved name.  It must fail.
p_reserved_url=http://localhost:$port/_providers/_primary
curl -dtype=http -dhost=localhost -dport=9091 $p_reserved_url || fail=1
# Ensure it was not added.
curl http://localhost:$port/_primary > p || fail=1
grep _primary p && { warn_ add-provider/reserved-name not rejected; fail=1; }

# Move the "primary" attribute to a different provider.
curl -X PUT $p1_url/_primary > p || fail=1
test -s p && fail=1
new_primary=$(curl http://localhost:$port/_providers/_primary) || fail=1
test "$new_primary" = PROVIDER-1 || fail=1

# Restore the primary attribute to the original.
# FIXME: if I don't restore, the following headless test makes iwhd segfault.
# Investigate that.
p1_url=http://localhost:$port/_providers/primary
curl -X PUT $p1_url/_primary > p || fail=1



# Test "headless" operation (no access to metadata DB).
kill -9 $mongo_pid
cleanup_() { kill $iwhd_pid; }
curl $bucket/attr_put > f3copy
test "$(cat f3copy)" = "nothing" || fail=1

Exit $fail
