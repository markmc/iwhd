#!/bin/sh
# add and remove providers

. "${srcdir=.}/init.sh"; path_prepend_ ..

mkdir FS mongod iwhd || framework_failure_ mkdir failed

m_port=$(expr $mongo_base_port + 2)

mongod --port $m_port --pidfilepath mongod/pid --dbpath mongod > mongod.log 2>&1 &
mongo_pid=$!
cleanup_() { kill -9 $mongo_pid; }

# Wait for up to 5 seconds for mongod to begin listening.
wait_for .1 50 'mongo localhost:$m_port < /dev/null' \
  || framework_failure_ mongod failed to start

port=9095
ulimit -c unlimited

printf '[{"path": "FS", "type": "fs", "name": "primary"}]\n' \
  > iwhd.cfg || fail=1

iwhd -v -p $port -c iwhd.cfg -d localhost:$m_port &
iwhd_pid=$!
cleanup_() { kill -9 $mongo_pid; kill $iwhd_pid; }

# Wait for up to 5 seconds for iwhd to begin listening on $port.
wait_for .1 50 "curl -s http://localhost:$port" \
  || { echo iwhd failed to listen; Exit 1; }

fail=0
n=400
# ===================================
for i in $(seq $n); do
  # Add provider
  p=http://localhost:$port/_providers/p-$i
  curl -d type=s3 -dhost=localhost -dport=80 -dkey=u -dsecret=p $p || fail=1
  curl http://localhost:$port/_providers > p-list || fail=1
  # Ensure that there is the correct number of p-DDD entries.
  test $(grep -c '<provider name="p-[0-9]*">' p-list) = $i || fail=1
  test $fail = 1 && sleep 99d
done

# List providers.
curl http://localhost:$port/_providers > p-list || fail=1

# Ensure that each was added:
for i in $(seq $n); do
  grep 'name="'p-$i'"' p-list || fail=1
done

# ===================================
for i in $(seq $n); do
  # Remove provider
  p=http://localhost:$port/_providers/p-$i
  curl -f -X DELETE $p
done

# List providers.
curl http://localhost:$port/_providers > p-list || fail=1

# Ensure that the primary one is still there:
grep 'name="primary"' p-list || fail=1

# Ensure that each has been removed:
for i in $(seq $n); do
  grep 'name="'p-$i'"' p-list && fail=1
done

Exit $fail
